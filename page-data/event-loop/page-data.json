{"componentChunkName":"component---node-modules-gatsby-theme-blog-src-templates-post-js","path":"/event-loop","webpackCompilationHash":"7123bf4d0f8fcc1c3f69","result":{"data":{"post":{"id":"ec97a1cc-ab50-580e-91cf-a4e53c53738e","title":"Event Loop","date":"October 22, 2019","excerpt":"The concurrency model describes how a programming language executes code independent of order to achieve improved performance. Modern…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Event Loop\",\n  \"date\": \"2019-10-22T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The concurrency model describes how a programming language executes code independent of order to achieve improved performance.\"), mdx(\"p\", null, \"Modern Javascript engines utilize the event loop concurrency model. The event loop is divided between the Call Stack, Event Queue and Event. \"), mdx(\"h2\", {\n    \"id\": \"call-stack\"\n  }, \"Call Stack\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function a() {\\n  return b()\\n}\\nfunction b() {\\n  return 4\\n}\\na(); \\n\\n// function a is added to the bottom of the call stack // function b called by function a is added to the top of the stack\\n// function b returns and is popped from the stack\\n// function a returns, pops the frame, and empties the stack\\n\")), mdx(\"p\", null, \"When a Javascript function is called, it is added to the call stack as a frame. If the function calls another function, the newly called function is added to the top to the stack in its own frame. \"), mdx(\"p\", null, \"Each function call is contained inside its own frame and subsequent function call frames are added above the former.\"), mdx(\"p\", null, \"As each function returns (beginning with the frame at the top of the call stack to the bottom), their frames are popped from the top until the Call Stack is emptied.\"), mdx(\"h2\", {\n    \"id\": \"heap\"\n  }, \"Heap\"), mdx(\"p\", null, \"The Heap is where objects are stored in memory. Javascript automatically allocates objects inside the heap and deletes objects that are no longer in use, called Garbage Collection. Objects inside the heap can be accessed for reading and writing data.\"), mdx(\"h2\", {\n    \"id\": \"event-queue\"\n  }, \"Event Queue\"), mdx(\"p\", null, \"The Event Queue is a list of messages to be passed to the Call Stack. New messages are added to the queue when there is an event with an event listener, each message containing its own function.\"), mdx(\"p\", null, \" The queue sends only one message at a time, which must run to completion before sending the next. Messages are ordered from oldest to newest and sent in the same order to the Call Stack. The message processed is then removed from the queue. \"), mdx(\"p\", null, \"The mesage removed from the queue calls the function with the message as its parameter. It is then added as a new frame in the Call Stack. Once the stack is empty, completing all frame functions, the queue sends its next oldest message.\"), mdx(\"p\", null, \"Messages can also be added through the setTimeout function (this inside setTimeout refers to the window unless bind, call, or apply are used). \"), mdx(\"p\", null, \"The delay argument of setTimeout pushes the callback function parameter and message to the queue once the minimum set time is up.\"), mdx(\"p\", null, \"A delay argument of 0 will send the message once a minimum of 0 seconds are up and during this time non-delayed code is sent to queue first. Then the delayed message is sent to the queue to wait for the older messages to be sent to the call stack and finish their executions.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},"site":{"siteMetadata":{"title":"Coding Blog"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"ec97a1cc-ab50-580e-91cf-a4e53c53738e","excerpt":"The concurrency model describes how a programming language executes code independent of order to achieve improved performance. Modern…","slug":"/event-loop","title":"Event Loop","date":"October 22, 2019","siteTitle":"Coding Blog","socialLinks":[{"name":"twitter","url":"https://twitter.com/"},{"name":"github","url":"https://github.com/hakod"}],"previous":{"node":{"id":"45b6317f-d19a-53a2-8819-c3dd7e871b5e","excerpt":"What is Closure Closure allows a function to reference values outside its scope. Closure is the function and its local variables stored for…","slug":"/scope-and-closure","title":"Scope and Closure","date":"October 21, 2019"}},"next":null}}}