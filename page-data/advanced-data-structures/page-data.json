{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/advanced-data-structures/","result":{"data":{"site":{"siteMetadata":{"title":"Coding Blog","social":[{"name":"twitter","url":"https://twitter.com/"},{"name":"github","url":"https://github.com/hakod"}]}},"blogPost":{"id":"0c8ebaf8-84d2-5dd6-b5b6-7cd941d743e1","excerpt":"TIL Advanced data structures Linked List Linked List…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Advanced data structures\",\n  \"date\": \"2019-12-30T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"til-advanced-data-structures\"\n  }, \"TIL Advanced data structures\"), mdx(\"h2\", {\n    \"id\": \"linked-list\"\n  }, \"Linked List\"), mdx(\"p\", null, \"Linked List\\uB294 \\uB3D9\\uC77C\\uD55C \\uBA54\\uBAA8\\uB9AC \\uC704\\uCE58\\uB85C \\uC81C\\uD55C\\uB418\\uC9C0 \\uC54A\\uB294 \\uC120\\uD615 \\uB370\\uC774\\uD130 \\uAD6C\\uC870. \\uC5F0\\uACB0\\uB41C \\uBAA9\\uB85D\\uC740 \\uBA38\\uB9AC(\\uBAA9\\uB85D\\uC758 \\uCCAB \\uBC88\\uC9F8 \\uB178\\uB4DC)\\uC640 \\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC\\uB85C \\uAD6C\\uC131\\uB41C\\uB2E4. \\uAC01 \\uB178\\uB4DC\\uB294 \\uD3EC\\uC778\\uD130\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uBAA9\\uB85D\\uC758 \\uB2E4\\uC74C \\uB178\\uB4DC\\uB97C \\uAC00\\uB9AC\\uD0A4\\uBA70, \\uBAA9\\uB85D\\uC758 \\uAC01 \\uB178\\uB4DC\\uB294 \\uC790\\uCCB4 \\uB370\\uC774\\uD130\\uB97C \\uD3EC\\uD568\\uD558\\uACE0 \\uC788\\uB2E4. Linked List\\uB97C \\uC0AC\\uC6A9\\uD558\\uBA74 \\uD3EC\\uC778\\uD130\\uB85C \\uC778\\uD574 \\uC77C\\uBC18 \\uC5B4\\uB808\\uC774\\uBCF4\\uB2E4 \\uB450 \\uB178\\uB4DC \\uC0AC\\uC774\\uC5D0 \\uC0C8 \\uB178\\uB4DC\\uB97C \\uC27D\\uAC8C \\uCD94\\uAC00\\uD560 \\uC218 \\uC788\\uB2E4.\"), mdx(\"p\", null, \"Linked List\\uC5D0\\uB294 \\uB2E4\\uC74C\\uACFC \\uAC19\\uC740 \\uBC29\\uBC95\\uC774 \\uC788\\uB2E4:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"add(node)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB9AC\\uC2A4\\uD2B8\\uC758 \\uAF2C\\uB9AC\\uB05D\\uC5D0 \\uC0C8\\uB85C\\uC6B4 \\uB178\\uB4DC\\uB97C \\uCD94\\uAC00\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"remove(index)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBA85\\uB2E8\\uC5D0\\uC11C \\uD5E4\\uB4DC\\uB178\\uB4DC \\uC81C\\uAC70\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"contains(element)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5F0\\uACC4 \\uBAA9\\uB85D\\uC5D0 \\uC18C\\uC790\\uAC00 \\uD3EC\\uD568\\uB418\\uC5B4 \\uC788\\uC744 \\uACBD\\uC6B0 true\\uB85C \\uD55C\\uB2E4\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// LinkedList constructor for head\\n    // create empty object \\u2018list\\u2019\\n    // add \\u2018head\\u2019 to list equal null\\n    // add \\u2018tail\\u2019 to list equal null\\n\\n    // add method to list \\u2018addToTail\\u2019 to add new element\\n            // create new node with data\\n            // loop through tail until null is found\\n            // add new node to tail\\n    // add method \\u2018removeHead\\u2019 which deletes head element\\n            // make the second element in the list into head\\n            // return head\\n    // add method \\u2018contains\\u2019 to check if list contains specified element\\n            // loop through list until end, return true if element is found\\n            // return false\\n    // return the list\\n\\n// Node for new node\\n    // create node object\\n\\n    // add to node \\u2018value\\u2019\\n    // add to node \\u2018next\\u2019 (pointer)\\n\\n    // return node;\\n\")), mdx(\"h2\", {\n    \"id\": \"graph\"\n  }, \"Graph\"), mdx(\"p\", null, \"Graph\\uB294 \\uB178\\uB4DC\\uC640 \\uAC00\\uC7A5\\uC790\\uB9AC\\uB85C \\uC774\\uB8E8\\uC5B4\\uC9C4 \\uBE44\\uC120\\uD615 \\uB370\\uC774\\uD130 \\uAD6C\\uC870\\uB2E4. \\uAC00\\uC7A5\\uC790\\uB9AC\\uB294 \\uB178\\uB4DC \\uAC04\\uC758 \\uC5F0\\uACB0\\uC774\\uB2E4. \\uC774 \\uB370\\uC774\\uD130 \\uAD6C\\uC870\\uB294 \\uBE44\\uC120\\uD615\\uC774\\uBA70, \\uC774\\uB294 \\uB178\\uB4DC \\uAC04\\uC758 \\uC5F0\\uACB0\\uC774 \\uC5B4\\uB290 \\uCABD\\uC73C\\uB85C\\uB4E0 \\uAC08 \\uC218 \\uC788\\uACE0, \\uC0BD\\uC785 \\uBC0F \\uC0AD\\uC81C\\uAC00 \\uC21C\\uCC28\\uC801\\uC774\\uC9C0 \\uC54A\\uB2E4\\uB294 \\uAC83\\uC744 \\uC758\\uBBF8\\uD55C\\uB2E4. \\uADF8\\uB798\\uD504 \\uBC29\\uBC95:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"addNode(node)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0C8 \\uB178\\uB4DC \\uCD94\\uAC00\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"addEdge(start, to)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2\\uAC1C \\uB178\\uB4DC\\uC758 \\uC5F0\\uACB0\\uBD80 \\uCD94\\uAC00\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"removeNode(node)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB178\\uB4DC\\uB97C \\uC81C\\uAC70\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"removeEdge (from, to)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"2\\uAC1C \\uB178\\uB4DC\\uC758 \\uC5F0\\uACB0\\uBD80 \\uC81C\\uAC70\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"contains(node)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB178\\uB4DC\\uAC00 \\uADF8\\uB798\\uD504\\uC5D0 \\uD3EC\\uD568\\uB41C \\uACBD\\uC6B0 true\\uB97C \\uBC18\\uD658\\uD568\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// Graph constructor\\n    // add vertex method\\n            // insert vertex in Map object with value and array of edges connected\\n    // contains method\\n            // search value in Map object, return true if found\\n    // remove node method\\n            // find value and delete\\n    // addEdge method\\n            // find values connected from list and add each other\\u2019s value into their arrays\\n\")), mdx(\"h2\", {\n    \"id\": \"tree\"\n  }, \"Tree\"), mdx(\"p\", null, \"\\uD2B8\\uB9AC(tree)\\uB294 \\uB610\\uD55C \\uADF8\\uB798\\uD504\\uC640 \\uC720\\uC0AC\\uD55C \\uBE44\\uC120\\uD615 \\uB370\\uC774\\uD130 \\uAD6C\\uC870\\uB85C, \\uBC29\\uD5A5(\\uD55C \\uBC29\\uD5A5\\uC73C\\uB85C\\uB9CC \\uC774\\uB3D9\\uD560 \\uC218 \\uC788\\uC74C)\\uACFC \\uC21C\\uD658(\\uB3D9\\uC77C\\uD55C \\uB178\\uB4DC\\uB85C \\uB450 \\uBC88 \\uC774\\uB3D9\\uD558\\uC9C0 \\uC54A\\uC74C)\\uC774\\uB2E4. \\uB8E8\\uD2B8 \\uBC0F \\uD558\\uC704 \\uB178\\uB4DC \\uC9D1\\uD569\\uC73C\\uB85C \\uAD6C\\uC131\\uB428. \\uD2B8\\uB9AC\\uC758 \\uAC01 \\uB178\\uB4DC\\uB294 \\uC790\\uCCB4 \\uD558\\uC704 \\uB178\\uB4DC\\uB97C \\uD3EC\\uD568\\uD560 \\uC218 \\uC788\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"addChild(node)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD2B8\\uB9AC\\uC5D0 \\uC0C8 \\uC790\\uC2DD \\uB178\\uB4DC \\uCD94\\uAC00\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"contains(node)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB098\\uBB34 \\uC548\\uC5D0\\uC11C \\uB178\\uB4DC\\uAC00 \\uBC1C\\uACAC\\uB418\\uBA74 true\\uB97C \\uBC18\\uD658\\uD55C\\uB2E4.\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// Tree constructor\\n    // create \\u2018root\\u2019 property with first value\\n    // create \\u2018children\\u2019 property with empty array\\n\\n    // add method addChild\\n            //  push child elements into tree node\\n    // add method contains\\n            // loop through children array and search element\\n\")), mdx(\"h2\", {\n    \"id\": \"binary-search-tree\"\n  }, \"Binary search tree\"), mdx(\"p\", null, \"\\uC774\\uC9C4 \\uAC80\\uC0C9 \\uD2B8\\uB9AC\\uB294 \\uCD94\\uAC00 \\uC18D\\uC131\\uC744 \\uAC00\\uC9C4 \\uD2B8\\uB9AC \\uB370\\uC774\\uD130 \\uAD6C\\uC870\\uB2E4. BST\\uC758 \\uAC01 \\uB178\\uB4DC\\uB294 \\uC67C\\uCABD \\uC544\\uC774\\uAC00 \\uC0C1\\uC704 \\uD0A4\\uBCF4\\uB2E4 \\uC791\\uC740 \\uD0A4 \\uAC12\\uC744 \\uAC16\\uB294 \\uBC29\\uC2DD\\uC73C\\uB85C \\uC815\\uB82C\\uB418\\uC5B4\\uC57C \\uD558\\uBA70, \\uC624\\uB978\\uCABD \\uB178\\uB4DC\\uB294 \\uC0C1\\uC704 \\uD0A4 \\uAC12\\uBCF4\\uB2E4 \\uD070 \\uD0A4 \\uAC12\\uC744 \\uAC00\\uC838\\uC57C \\uD55C\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"add(node)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"remove(node)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// Tree constructor\\n    // create \\u2018root\\u2019 property with first value\\n    // create \\u2018children\\u2019 property with empty array\\n\\n    // add method insert\\n            // compare new value to root value\\n            // if higher than root, search right\\n            // if lower than root, search left\\n            // insert value if \\u2018children\\u2019 property length is less than two\\n    // add method contains\\n            // compare search value to root\\n            // root becomes right node if value is higher\\n            // root becomes left node if value is lower\\n            // is value is found, return true\\n\")), mdx(\"h2\", {\n    \"id\": \"hash-table\"\n  }, \"Hash table\"), mdx(\"p\", null, \"\\uD574\\uC2DC \\uD14C\\uC774\\uBE14\\uC740 \\uD0A4\\uB97C \\uAC12\\uC5D0 \\uB9E4\\uD551\\uD558\\uB294 \\uB370\\uC774\\uD130 \\uAD6C\\uC870\\uB2E4. \\uD574\\uC2DC \\uAC12\\uC740 \\uAC01 \\uAC12\\uC5D0 \\uD560\\uB2F9\\uB418\\uC5B4 \\uD574\\uC2DC \\uD14C\\uC774\\uBE14 \\uB370\\uC774\\uD130 \\uAD6C\\uC870 \\uB0B4\\uBD80\\uC5D0 \\uC800\\uC7A5\\uB41C\\uB2E4. \\uD574\\uC2DC\\uD568\\uC218\\uC758 \\uC774\\uC6A9\\uC744 \\uD1B5\\uD574 \\uD574\\uC2DC\\uD45C \\uC548\\uC5D0\\uC11C \\uD0A4\\uC758 \\uC778\\uB371\\uC2A4\\uB97C \\uBC1C\\uACAC\\uD55C\\uB2E4. \\uD574\\uC2DC\\uD568\\uC218\\uB294 \\uB370\\uC774\\uD130\\uB97C \\uC9C0\\uB3C4\\uD55C\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"insert(key, value)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD574\\uC2DC\\uD45C\\uC5D0 \\uD0A4\\uC640 \\uAC12\\uC744 \\uC0BD\\uC785\\uD55C\\uB2E4.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"remove(key)\\n*\\uAE30\\uD638 \\uBC0F \\uC9C0\\uC815\\uAC12\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"retrieve(key)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC9C0\\uC815\\uD0A4\\uC5D0 \\uC124\\uC815\\uB41C \\uAC12 \\uAC80\\uC0C9\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"// HashTable constructor\\n\\n// add insert method to hashtable\\n    // run hashing function to generate index\\n        // push value into storage at hashed index\\n\\n// add retrieve method to hashtable\\n    // run hashing function to generate index\\n    // return value found at index\\n\\n// add remove method to hashtable\\n    // run hashing function to generate index\\n    // delete element at index\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/advanced-data-structures/","title":"Advanced data structures","tags":[],"keywords":[],"date":"December 30, 2019"},"previous":{"id":"3e7e7a51-9d45-53c7-a021-843a28e59f6a","excerpt":"TIL Stack and Queue Stack 스택은 LIFO(Last in, first out) 순서를 따르는 데이터 구조다. 스택에는 세 가지 주요 방법이 있다. Push() 스택의 맨 위에 요소 추가 Pop() 스택 상단에서 요소 제거 Peek…","slug":"/basic-data-structures/","title":"Basic data structures","date":"December 28, 2019"},"next":null},"pageContext":{"id":"0c8ebaf8-84d2-5dd6-b5b6-7cd941d743e1","previousId":"3e7e7a51-9d45-53c7-a021-843a28e59f6a"}}}