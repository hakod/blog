{"componentChunkName":"component---node-modules-gatsby-theme-blog-core-src-templates-post-query-js","path":"/basic-data-structures/","result":{"data":{"site":{"siteMetadata":{"title":"Coding Blog","social":[{"name":"twitter","url":"https://twitter.com/"},{"name":"github","url":"https://github.com/hakod"}]}},"blogPost":{"id":"3e7e7a51-9d45-53c7-a021-843a28e59f6a","excerpt":"TIL Stack and Queue Stack 스택은 LIFO(Last in, first out) 순서를 따르는 데이터 구조다. 스택에는 세 가지 주요 방법이 있다. Push() 스택의 맨 위에 요소 추가 Pop() 스택 상단에서 요소 제거 Peek…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Basic data structures\",\n  \"date\": \"2019-12-28T00:00:00.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"til-stack-and-queue\"\n  }, \"TIL Stack and Queue\"), mdx(\"h2\", {\n    \"id\": \"stack\"\n  }, \"Stack\"), mdx(\"p\", null, \"\\uC2A4\\uD0DD\\uC740 LIFO(Last in, first out) \\uC21C\\uC11C\\uB97C \\uB530\\uB974\\uB294 \\uB370\\uC774\\uD130 \\uAD6C\\uC870\\uB2E4. \\uC2A4\\uD0DD\\uC5D0\\uB294 \\uC138 \\uAC00\\uC9C0 \\uC8FC\\uC694 \\uBC29\\uBC95\\uC774 \\uC788\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Push()\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC2A4\\uD0DD\\uC758 \\uB9E8 \\uC704\\uC5D0 \\uC694\\uC18C \\uCD94\\uAC00\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pop()\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC2A4\\uD0DD \\uC0C1\\uB2E8\\uC5D0\\uC11C \\uC694\\uC18C \\uC81C\\uAC70\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Peek()\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC2A4\\uD0DD\\uC5D0 \\uC601\\uD5A5\\uC744 \\uC8FC\\uC9C0 \\uC54A\\uACE0 \\uC2A4\\uD0DD \\uB0B4\\uBD80\\uC758 \\uCD5C\\uC0C1\\uC704 \\uC694\\uC18C \\uBC18\\uD658\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"class stack {\\n  constructor() {  \\n        this.items = [];\\n  }\\n        push(a){this.items.push(a)}\\n     pop() {this.items.pop()}\\n        peek() {return this.items[this.items.length-1]}\\n}\\nlet a = new stack();\\na.push('rock');\\na.push('dirt');\\na.push('grass');\\n\\na // the instance returns a property array with [ \\u201Crock\\u201D, \\u201Cdirt\\u201D, \\u201Cgrass\\u201D ]\\n\\na.pop(); // pops the newest added element (\\u201Cgrass\\u201D)\\na // the instance returns a property array with [ \\u201Crock\\u201D, \\u201Cdirt\\u201D ]\\n\\na.peek(); // returns \\u201Cdirt\\u201D, the last element in the array   \\n\")), mdx(\"p\", null, \"\\uC2A4\\uD0DD \\uB370\\uC774\\uD130 \\uAD6C\\uC870\\uC758 \\uC2DC\\uAC01\\uC801 \\uC608\\uB294 \\uB545\\uC5D0 \\uAD6C\\uBA4D\\uC744 \\uD30C\\uB294 \\uAC83\\uC774\\uB2E4. \\uD558\\uCE35(\\uC120\\uC785)\\uC744 \\uC81C\\uAC70\\uD558\\uB824\\uBA74 \\uBA3C\\uC800 \\uC9C0\\uAD6C\\uC758 \\uAC00\\uC7A5 \\uBC14\\uAE65\\uCABD \\uCE35(\\uB9C8\\uC9C0\\uB9C9 \\uC548)\\uC744 \\uC81C\\uAC70\\uD574\\uC57C \\uD55C\\uB2E4.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://raw.githubusercontent.com/hakod/blog/master/content/assets/stack-data-structure.png\",\n    \"alt\": null\n  }))), mdx(\"h2\", {\n    \"id\": \"queue\"\n  }, \"Queue\"), mdx(\"p\", null, \"\\uD050\\uB294 \\uC120\\uD615\\uC801\\uC73C\\uB85C \\uBC30\\uC5F4\\uB41C \\uB2E8\\uC21C\\uD55C \\uB370\\uC774\\uD130 \\uAD6C\\uC870\\uB2E4. \\uC2A4\\uD0DD\\uACFC \\uB2EC\\uB9AC \\uD050\\uB294 FIFO(\\uC120\\uC785\\uC120\\uCD9C, \\uC120\\uC785\\uC120\\uCD9C) \\uC21C\\uC11C\\uB85C \\uC791\\uB3D9\\uD55C\\uB2E4. \\uC774\\uAC83\\uC740 \\uCD94\\uAC00\\uB41C \\uAC00\\uC7A5 \\uC624\\uB798\\uB41C \\uC694\\uC18C\\uAC00 \\uC0C8\\uB85C\\uC6B4 \\uC694\\uC18C\\uBCF4\\uB2E4 \\uBA3C\\uC800 \\uC81C\\uAC70\\uB428\\uC744 \\uC758\\uBBF8\\uD55C\\uB2E4. Javascript\\uC5D0\\uC11C \\uD050\\uB294 \\uC5B4\\uB808\\uC774 \\uBA54\\uC11C\\uB4DC pop()\\uACFC unshift()\\uB85C \\uAD6C\\uD604\\uD560 \\uC218 \\uC788\\uB2E4. \\uD050\\uC5D0\\uB294 \\uC5B4\\uB808\\uC774\\uC5D0\\uC11C \\uAC00\\uC7A5 \\uC624\\uB798\\uB41C \\uAC12\\uC744 \\uBC18\\uD658\\uD558\\uAE30 \\uC704\\uD55C peek() \\uBC29\\uBC95\\uB3C4 \\uD3EC\\uD568\\uB418\\uC5B4 \\uC788\\uB2E4.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"pop()\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Dequeue\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"unshift()\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Enquue\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"peek()\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBC30\\uC5F4\\uC5D0\\uC11C \\uAC00\\uC7A5 \\uC624\\uB798\\uB41C \\uAC12(\\uB2E4\\uC74C\\uC73C\\uB85C \\uD280\\uACA8\\uC9D0)\\uC744 \\uBC18\\uD658\\uD55C\\uB2E4.\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"class Queue {\\n    constructor() {\\n            this.data = [];\\n    }\\n    enqueue(a) {this.data.unshift(a);}\\n    dequeue() {this.data.pop();}\\n    peek() {return this.data[this.data.length - 1];}\\n}\\n\\nvar e = new Queue()\\ne.enqueue(1);\\ne.enqueue(2);\\ne.enqueue(3);\\ne.enqueue(4);\\n\\ne //  data property array contains [ 4, 3, 2, 1]\\n\\ne.dequeue(); // removes 1 from the array\\n\\ne.peek(); // returns 2\\n\")), mdx(\"p\", null, \"\\uD050 \\uB370\\uC774\\uD130 \\uAD6C\\uC870\\uB97C \\uC2DC\\uAC01\\uC801\\uC73C\\uB85C \\uC0DD\\uAC01\\uD574\\uBCF4\\uBA74 \\uB2E4\\uC774\\uBE59 \\uBCF4\\uB4DC\\uC758 \\uB77C\\uC778\\uC5C5\\uC744 \\uC0C1\\uC0C1\\uD560 \\uC218 \\uC788\\uB2E4. \\uAC01 \\uC7A0\\uC218\\uBD80\\uB4E4\\uC740 \\uC904\\uC744 \\uC11C\\uC11C \\uC904\\uC744 \\uC11C\\uACE0, \\uC904\\uC5D0 \\uC788\\uB294 \\uCCAB \\uBC88\\uC9F8 \\uC7A0\\uC218\\uBD80\\uB4E4\\uC740 \\uB2E4\\uC74C \\uC0AC\\uB78C\\uB4E4\\uC774 \\uCC28\\uB840\\uB300\\uB85C \\uB3CC\\uC544\\uAC00\\uAE30 \\uC804\\uC5D0 \\uBCF4\\uB4DC\\uC5D0\\uC11C \\uB6F0\\uC5B4\\uB0B4\\uB824\\uC57C \\uD55C\\uB2E4.\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"/content/assets/queue-data-structure.png\",\n    \"alt\": null\n  }))));\n}\n;\nMDXContent.isMDXComponent = true;","slug":"/basic-data-structures/","title":"Basic data structures","tags":[],"keywords":[],"date":"December 28, 2019"},"previous":{"id":"d730aa26-cf7a-5d31-975a-00d5b170154b","excerpt":"What is OOP OOP는 데이터 모델의 청사진을 활용하는 프로그래밍 설계 철학이다. OOP…","slug":"/oop/","title":"OOP, JS Object Instantiation Patterns, and Prototype","date":"December 28, 2019"},"next":null},"pageContext":{"id":"3e7e7a51-9d45-53c7-a021-843a28e59f6a","previousId":"d730aa26-cf7a-5d31-975a-00d5b170154b"}}}